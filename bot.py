
import database
import keyboards
from  notifier import Notifier
from telebot import  types
import telebot

from datetime import datetime
import dayscalculater
AIM = 10000
DaysLeft = dayscalculater.DaysLeft
#DaysLeft = (datetime(day=1, month= 9, year= 2022) - datetime.now()).days

Token = "TOKEN"

#—Å–∞–º –±–æ—Ç
bot = telebot.TeleBot(token=Token)

@bot.callback_query_handler(func = lambda c: c.data.startswith('a'))
def process(callback_query: types.CallbackQuery):
    code = int(callback_query.data[1:])
    if code == 1:
        m = "üí§\n–ù–µ –æ—Ç–∂–∏–º–∞—Ç—å—Å—è 2 –¥–Ω—è –∏ –±–æ–ª–µ–µ."
        show_alert(m,callback_query)
    elif code == 2:
        m = "üöó\n–ü—Ä–µ–≤—ã—Å–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É –≤ 5000 –æ—Ç–∂–∏–º–∞–Ω–∏–π."
        show_alert(m, callback_query)
    elif code == 3:
        m = "ü§¶\n–ü–æ—Å–ª–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –±–æ–ª–µ–µ 5 —Ä–∞–∑"
        show_alert(m, callback_query)
    elif code == 4:
        m = "üòÇ\n–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å 300 –æ—Ç–∂–∏–º–∞–Ω–∏–π –∑–∞ —Ä–∞–∑."
        show_alert(m, callback_query)
    elif code == 5:
        m = "üôä\n–ü—Ä–∏—Å–ª–∞—Ç—å –Ω–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π."
        show_alert(m, callback_query)
    elif code == 6:
        m = "üî•\n–ó–∞–Ω—è—Ç—å —Ç–æ–ø 3 –±–æ–ª–µ–µ 1 —Ä–∞–∑–∞."
        show_alert(m, callback_query)
    elif code == 7:
        m = "üéâüéâüéâ\n–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂!"
        show_alert(m, callback_query)
    elif code == 8:
        m = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞"
        show_alert(m, callback_query)
    elif code == 9:
        m = "üòÖ\n–ù—É–∂–Ω–æ –ª–∏ –Ω–∞—á–∏–Ω–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂?"
        show_alert(m, callback_query)
    elif code == 10:
        m = "–ü—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ –±–æ–ª–µ–µ 70 –¥–Ω–µ–π –∏ –∏–º–µ—Ç—å –±–æ–ª–µ–µ 3000 –æ—Ç–∂–∏–º–∞–Ω–∏–π"
        show_alert(m, callback_query)
    elif code == 11:
        m = "‚Åâ\n–ù–∞–∂–∞—Ç—å –≤—Å–µ –∫–Ω–æ–ø–∫–∏"
        show_alert(m, callback_query)
    elif code == 12:
        m = "–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π username"
        show_alert(m, callback_query)
    else:
        bot.callback_query_handler(callback_query.id)


@bot.message_handler(commands=["start"])
def start(message: types.Message):
    user_id = message.from_user.id
    if message.from_user.last_name:
        last = message.from_user.last_name[:1]
    try:
        name = f"{message.from_user.first_name} {last}."
    except:
        name = "–ù–µ –æ–ø–æ–∑–Ω–∞–Ω"
    bot.send_message(user_id,"–î–µ–ª–∞–π –æ—Ç–∂–∏–º–∞–Ω–∏—è –∏ –ø—Ä–∏—Å—ã–ª–∞–π –º–Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∞ —è –±—É–¥—É –∏—Ö —Å—á–∏—Ç–∞—Ç—å!\n–ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Ä–∞—Å—Ç—è–∂–∫—É!\nhttps://youtube.com/shorts/ba8tr1NzwXU?feature=share",
                         reply_markup=keyboards.main_kb)
    database.updatebase(user_id, name)


@bot.message_handler(content_types=['text'])
def messages(message: types.Message):
    text = message.text
    if str.isdigit(text):
        pushupsCounter(message, int(text))
    elif text == "–¢–û–ü üîù":
        replyTop(message)

    elif text == "–ü—Ä–æ—Ñ–∏–ª—å üë•":
        bot.send_message(message.from_user.id,"<", reply_markup= keyboards.profile_kb)
        bot.delete_message(message.from_user.id,message_id=message.id)
    elif text == "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîî":
        switch_notifications_mode(message)
    elif text == "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è":
        bot.send_message(message.from_user.id, "–Ø –ª–µ–Ω–∏–≤—ã–π –±–æ—Ç, –ø–æ—ç—Ç–æ–º—É –≤—ã–¥–∞–≤–∞–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–∞–º!\n–¢–æ–ª—å–∫–æ —á–µ—Å—Ç–Ω–æ! ;)", reply_markup=keyboards.inline_kb)
        bot.delete_message(message.from_user.id, message_id=message.id)
    elif text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.from_user.id,text=">",reply_markup= keyboards.main_kb)
        bot.delete_message(message.from_user.id, message_id=message.id)
    else:
        bot.send_message(message.from_user.id, "–Ø –Ω–µ –ò–ò. –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

def show_alert(message: str, callback):
    bot.answer_callback_query(callback.id, text=message, show_alert=True)

def switch_notifications_mode(message: types.Message):
    us_id = message.from_user.id
    new_permission = database.switch_notifications(us_id)
    if new_permission:
        bot.send_message(us_id,text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.", reply_markup=keyboards.profile_kb)
    else:
        bot.send_message(us_id,text= "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã.", reply_markup=keyboards.profile_kb)


def replyTop(message: types.Message):
    toplist = database.get_top()
    userResult = database.get_user_result(message.from_user.id)
    answer = "–¢–æ–ø 3:\n"
    place = 1
    for tuple in toplist:
        answer +=f"{place}. {tuple[0]}: {tuple[1]}\n"
        place += 1
    bot.send_message(message.from_user.id, text=answer + f"\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {userResult}", reply_markup= keyboards.main_kb)
    bot.delete_message(message.from_user.id, message_id=message.id)

def pushupsCounter(message: types.Message,count: int):
    us_id = message.from_user.id
    if count <= 0:
        bot.send_message(us_id,"–û–±—Ä–∞—Ç–Ω—ã–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è? :D")
        return
    doneInfo = database.getPushupsCount(message.from_user.id)
    if doneInfo is None:
        # TODO: –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤–∑–ª–æ–º—â–∏–∫
        bot.send_message(us_id,"–£–ø—Å! –¢—ã —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª. :D")
        return
    totaldone = doneInfo[0] + count
    doneperday = doneInfo[1] + count
    if totaldone >= AIM:
        bot.send_message(us_id,"–ö—Ä–∞—Å–∞–≤–∞ —Ö–∞—Ä—ç –æ–Ω–∂—É–º–∞—Ç—å—Å—è –∏–¥–∏ –ø–æ–¥—Ç—è–≥–∏–≤–∞—Ç—å—Å—è! üóø")
        return
    database.update_pushups(message.from_user.id, totaldone, doneperday)

    bot.send_message(us_id, text = toDo(doneperday,doneInfo[2], totaldone))

from  random import choice
def toDo(done:int, aim: int, total: int):
    variants =["üí™ –ú–æ–ª–æ–¥–µ—Ü!", "üî• –ü—Ä–æ–¥–æ–ª–∂–∞–π!", "üòé –ß–µ–ª, —Ö–∞—Ä–æ—à!"]
    addition = ""
    if(done > aim):
        addition = "\n–ú–æ–∂–µ—à—å –æ—Ç–¥–æ—Ö–Ω—É—Ç—å! –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ —Ä–∞—Å—Ç—è–∂–∫—É!"
    return f"{choice(variants)} {total/AIM*100:.1f}%\n–¶–µ–ª—å –Ω–∞ –¥–µ–Ω—å: ‚òë {done}/{aim}{addition}"


if __name__ == "__main__":
    database.init()
    database.update_users_aim()
    Notifier(target=bot).notify()
    bot.polling(none_stop=True)

